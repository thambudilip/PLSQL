DROP TABLE ITEM;
CREATE TABLE ITEM(
    ITEM_NO VARCHAR2(10),
    PRICE NUMBER(7,2),
    QTY NUMBER(3),
    NAME VARCHAR2(100));

ALTER TABLE ITEM ADD CONSTRAINT item_pk PRIMARY KEY (ITEM_NO);

INSERT INTO ITEM(ITEM_NO,PRICE,QTY,NAME) VALUES ('IT01',50,150,'RICE');
INSERT INTO ITEM(ITEM_NO,PRICE,QTY,NAME) VALUES ('IT02',5,70,'PENCIL');
INSERT INTO ITEM(ITEM_NO,PRICE,QTY,NAME) VALUES ('IT03',80000,40,'TRACTOR');
INSERT INTO ITEM(ITEM_NO,PRICE,QTY,NAME) VALUES ('IT04',75000,15,'CAR');
INSERT INTO ITEM(ITEM_NO,PRICE,QTY,NAME) VALUES ('IT05',75000,0,'BIKE');

SELECT * FROM ITEM;

DROP TABLE ORDERS;
CREATE TABLE ORDERS(
    ORDER_NO NUMBER,
    ORDER_DATE DATE,
    ITEM_NO VARCHAR2(10),
    ORDER_QTY NUMBER,
    TOTAL_PRICE NUMBER,
    RE_ORDER_LEVEL NUMBER
);

ALTER TABLE ORDERS ADD CONSTRAINTS order_pk PRIMARY KEY(ORDER_NO);
ALTER TABLE ORDERS ADD CONSTRAINTS orders_fk FOREIGN KEY(ITEM_NO) REFERENCES ITEM(ITEM_NO);

INSERT INTO ORDERS(ORDER_NO,ORDER_DATE,ITEM_NO,ORDER_QTY) VALUES (01,SYSDATE,'IT01',2);
INSERT INTO ORDERS(ORDER_NO,ORDER_DATE,ITEM_NO,ORDER_QTY) VALUES (02,SYSDATE,'IT01',4);
INSERT INTO ORDERS(ORDER_NO,ORDER_DATE,ITEM_NO,ORDER_QTY) VALUES (03,SYSDATE,'IT01',120);
INSERT INTO ORDERS(ORDER_NO,ORDER_DATE,ITEM_NO,ORDER_QTY) VALUES (04,SYSDATE,'IT05',6);

SELECT * FROM ITEM;
SELECT * FROM ORDERS;

DELETE FROM ORDERS WHERE ORDER_NO = 3;

-- trigger for calculating toal price on orders table

CREATE OR REPLACE TRIGGER update_total_price
BEFORE INSERT OR UPDATE ON ORDERS
FOR EACH ROW
DECLARE
    v_price ITEM.PRICE%TYPE;
BEGIN
    SELECT PRICE
    INTO v_price
    FROM ITEM
    WHERE ITEM_NO = :NEW.ITEM_NO;
    :NEW.TOTAL_PRICE := v_price * :NEW.ORDER_QTY;
END;

-- creating trigger for update a quantity after order the item

DROP TRIGGER update_qty;
CREATE OR REPLACE TRIGGER update_qty
AFTER INSERT ON ITEM
FOR EACH ROW
DECLARE
    v_qty ITEM.QTY%TYPE;
    v_order_qty ORDERS.ORDER_QTY%TYPE;
BEGIN
    SELECT I.QTY, O.ORDER_QTY INTO v_qty, v_order_qty
    FROM ITEM I     INNER JOIN ORDERS O 
    ON I.ITEM_NO = O.ITEM_NO ;
    :NEW.QTY := v_qty - v_order_qty;
END;  /*ORA-04084: cannot change NEW values for this trigger type */ -- : New is not supported after insert , use before it works


-- 1.creating trigger for update a quantity after order the item
DROP TRIGGER update_qty_for_orders;
CREATE OR REPLACE TRIGGER update_qty_for_orders
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
    UPDATE ITEM
    SET QTY = QTY - :NEW.ORDER_QTY
    WHERE ITEM_NO = :NEW.ITEM_NO;
END;

--2. trigger for qty = 0 then display a message as 'no more stocks' 

CREATE OR REPLACE TRIGGER no_more_items
BEFORE INSERT ON ORDERS
FOR EACH ROW
DECLARE
    v_qty ITEM.QTY%TYPE;
BEGIN
    SELECT QTY INTO v_qty
    FROM ITEM
    WHERE ITEM_NO = :NEW.ITEM_NO;    
    IF v_qty = 0
    THEN
    DBMS_OUTPUT.PUT_LINE('No more stocks');
END IF;
END;

--3. re order level trigger for particular item is sold.

DROP TABLE order_level ;
CREATE OR REPLACE TRIGGER order_levels
BEFORE INSERT ON ORDERS
FOR EACH ROW
DECLARE
    v_qty ITEM.QTY%TYPE;
BEGIN
    SELECT QTY INTO v_qty
    FROM ITEM
    WHERE ITEM_NO = :NEW.ITEM_NO;
IF v_qty < 10
THEN 
DBMS_OUTPUT.PUT_LINE('Please order the items');
--RAISE_APPLICATION_ERROR(-20001, 'Re-order quantity cannot be greater than the available quantity.');
END IF;
END;

4. If user trying to update a primary key column , then display an error message "you can't edit the primary key column".

CREATE OR REPLACE TRIGGER primarykey_notaffected
BEFORE UPDATE ON ITEM
FOR  EACH ROW 
DECLARE
BEGIN
    IF :OLD.ITEM_NO <> :NEW.ITEM_NO 
    THEN
    RAISE_APPLICATION_ERROR(-20005,'You cant update a primary key clumn values');
	END IF;
END;

UPDATE ITEM SET ITEM_NO = 'ITEM01' WHERE ITEM_NO = 'IT01';

SELECT * FROM ITEM;

--6. Disable a primary key constraint
    
ALTER TABLE ITEM DISABLE CONSTRAINTS item_pk; --ORA-02297: cannot disable constraint (SQL_XWGKDKYCHFPOKIUTUVCLGLOKE.ITEM_PK) - dependencies exist 
ALTER TABLE ORDERS DISABLE CONSTRAINTS order_pk; -- Table altered.

DESC ITEM;
DESC ORDERS;



--7.Disable a triggers

SELECT * FROM USER_TRIGGERS ;
SELECT * FROM USER_TRIGGERS WHERE TABLE_NAME = 'ORDERS' ;
SELECT * FROM  USER_TRIGGERS WHERE TRIGGERING_EVENT = 'UPDATE';

ALTER TRIGGER PRIMARYKEY_NOTAFFECTED DISABLE ;  --Trigger altered.

SELECT * FROM USER_TRIGGERS WHERE TRIGGER_NAME = 'PRIMARYKEY_NOTAFFECTED';

SELECT * FROM USER_TABLES WHERE TABLE_NAME = 'ITEM';

SELECT STATUS FROM USER_TRIGGERS WHERE TRIGGER_NAME = 'PRIMARYKEY_NOTAFFECTED';  -- DISABLED












